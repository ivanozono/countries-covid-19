"""
The 'paths.py' module within the 'final_project' package is a utility script designed to 
handle the construction and management of file paths across the entire project. It utilizes 
the 'pyprojroot' package to ensure paths are referenced relative to the project root, 
facilitating a consistent and error-free way to access and save files, regardless of the 
operating environment or the directory from which scripts are run.

This module includes a function to dynamically create directory path functions for various 
data and project directories, such as raw data, processed data, models, notebooks, etc. 
These functions can be used throughout the project to refer to directories without hardcoding 
paths, thus enhancing the portability and maintainability of the codebase.

Usage:
The functions generated by 'make_dir_function' should be used to construct paths when loading 
or saving data within the project. This allows for flexibility and ease of access to the 
project's directory structure.
Example:
    from final_project.utils import paths
    raw_data_path = paths.data_raw_dir('my_raw_data.csv')

"""


# Importing necessary libraries for path manipulation and type annotations
from pyprojroot import here  # Used to locate the root of the project directory
from pathlib import Path  # Represents filesystem paths with semantics appropriate for different operating systems
from typing import Union, Callable, Iterable  # Type annotations for more readable code

def make_dir_function(dir_name: Union[str, Iterable[str]]) -> Callable[..., Path]:
    """
    Creates a function that constructs paths within the project directory.

    This utility function simplifies the process of creating file paths,
    ensuring that all paths are relative to the project's root directory.

    Args:
    dir_name: A string or an iterable of strings that represent subdirectory names.
              If dir_name is an iterable, it is combined into a single path.

    Returns:
    A function that, when called, generates a Path object for a given subdirectory
    within the project root, with optional additional path components passed as arguments.
    """

    # Internal function that constructs the directory path
    def dir_path(*args) -> Path:
        # Checks if the dir_name is a single string or an iterable of strings
        # and creates the appropriate path object
        if isinstance(dir_name, str):
            return here().joinpath(dir_name, *args)
        else:
            return here().joinpath(*dir_name, *args)

    # Returns the internal function ready to be used elsewhere in the project
    return dir_path

# Create the root project directory path function
project_dir = make_dir_function("")

# Define directory types for various aspects of the project such as data storage and reports
for dir_type in [
        ["data"],
        ["data", "raw"],
        ["data", "processed"],
        ["data", "interim"],
        ["data", "external"],
        ["models"],
        ["notebooks"],
        ["references"],
        ["reports"],
        ["reports", "figures"]
    ]:
    # Construct the variable name for each directory type
    dir_var = '_'.join(dir_type) + "_dir"
    # Dynamically create a function for each directory type and assign it to the variable
    exec(f"{dir_var} = make_dir_function({dir_type})")
